---
version: '3.6'
volumes:
  redis-data:
  rabbitmq-data:

configs:
  log4rs:
    file: log4rs.yaml
  dot-env:
    file: .env

services:
  redis:
    container_name: svc-telemetry-redis
    image: redis:6.2-alpine
    restart: always
    command: redis-server --save 20 1 --loglevel warning
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 2s
      timeout: 1s
      retries: 3
    volumes:
      - redis-data:/data
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
      - ALLOW_EMPTY_PASSWORD=yes

  rabbitmq:
    container_name: arrow-rabbitmq
    image: rabbitmq:3.11-alpine
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    command: rabbitmq-server
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics","ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - rabbitmq-data:/data
    environment:
      - RABBITMQ_NODENAME

  web-server:
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    extends:
      file: docker-compose-base.yml
      service: web-server
    environment:
      - REDIS__URL
      - REDIS__POOL__MAX_SIZE
      - REDIS__POOL__TIMEOUTS__WAIT__SECS
      - REDIS__POOL__TIMEOUTS__WAIT__NANOS
      - STORAGE_HOST_GRPC
      - STORAGE_PORT_GRPC
      - GIS_PORT_GRPC
      - GIS_HOST_GRPC
      - AMQP__URL
      - AMQP__POOL__MAX_SIZE
      - AMQP__POOL__TIMEOUTS__WAIT__SECS
      - AMQP__POOL__TIMEOUTS__WAIT__NANOS
      - RINGBUFFER_SIZE_BYTES
      - GIS_PUSH_CADENCE_MS
      - GIS_MAX_MESSAGE_SIZE_BYTES
      - REST_REQUEST_LIMIT_PER_SECOND
      - REST_CONCURRENCY_LIMIT_PER_SERVICE
      - REST_CORS_ALLOWED_ORIGIN

  example:
    extends:
      file: docker-compose-base.yml
      service: example

  ut-coverage:
    extends:
      file: docker-compose-base.yml
      service: ut-coverage

  it-coverage:
    extends:
      file: docker-compose-base.yml
      service: it-coverage
